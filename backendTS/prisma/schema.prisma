// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model produtos {
  id Int @id @default(autoincrement()) @map("p_id")
  idopcional String? @db.VarChar(100) @unique @map("p_idopcional")
  nome String @db.VarChar(100) @map("p_nome")
  descricao String? @db.VarChar(255) @map("p_descricao")
  codigoBarras String? @db.VarChar(255) @map("p_codigo_barras")
  qtdeConsumo Int @map("p_qtdeConsumo") 
  catId Int? @unique @map("p_catid") 

  categoria categorias? @relation(fields: [catId], references: [id], onDelete: SetNull) // 1:1
  lote lotes[] // 1:N
}

model categorias{
  id Int @id @default(autoincrement()) @map("c_id")
  nome String @db.VarChar(50) @map("c_nome")
  subcat Int? @map("c_subcat")

  parent    categorias?  @relation("CatToSubcat", fields: [subcat], references: [id]) // o pai tem 1 
  children  categorias[] @relation("CatToSubcat")                                     // o filho tem N

  produtos produtos? // 1:1 relation
}

model lotes{
  id Int @id @default(autoincrement()) @map("l_id")
  apelido String @db.VarChar(100) @map("l_apelido")
  datacompra DateTime @db.Date @map("l_datacompra")
  datavalidade DateTime? @db.Date @map("l_datavalidade")
  qtde Int @map("l_qtde")
  vlrcompra Float @map("l_vlrcompra")
  vlrvendaunit Float @map("l_vlrvenda")
  produtoid Int @map("l_produtoid")
  idnota Int @unique @map("l_idnota")
  idfornecedor Int @map("l_idfornecedor")

  produto produtos @relation(fields: [produtoid], references: [id]) // 1:N
  notafiscal notasfiscais @relation(fields: [idnota],references: [id]) // 1:1
  fornecedor fornecedores @relation(fields: [idfornecedor], references: [id]) // 1:N

  movimento movimentos[]
}

model notasfiscais{
  id Int @id @default(autoincrement()) @map("n_id")
  numero String @db.VarChar(30) @map("n_numero")
  data DateTime @db.DateTime() @map("n_data")
  chave String @db.VarChar(100) @map("n_chave")
  xml String @db.LongText @map("n_xml")
  emissor String @db.VarChar(20) @map("n_emissor")

  lote lotes? // 1:1
  movimento movimentos? // 1:1
}

model fornecedores{
  id Int @id @default(autoincrement()) @map("f_id")
  nome String @db.VarChar(100) @map("f_nome")
  cnpj String @db.VarChar(30) @map("f_cnpj")
  endereco String @db.VarChar(100) @map("f_endereco")
  telefone String @db.VarChar(20) @map("f_telefone")
  email String @db.VarChar(150) @map("f_email")
  status status @map("f_status")

  lote lotes[]
}

enum status {
  ATIVO
  INATIVO
  OUTRO
}

model usuarios{
  id Int @id @default(autoincrement()) @map("u_id")
  nome String @db.VarChar(150) @map("u_nome")
  email String @unique @db.VarChar(150) @map("u_email")
  senha String @db.VarChar(255) @map("u_senha")
  grupoacesso Int @map("u_grupoacesso")
  cpf String @db.VarChar(14) @map("u_cpf")

  movimento movimentos[]
}

model movimentos{
  id Int @id @default(autoincrement()) @map("m_id")
  qtde Int @map("m_qtde")
  tipo tipo @map("m_tipo")
  cliente String @db.VarChar(100) @map("m_cliente")
  data DateTime @db.Timestamp(3) @default(now()) @map("m_data")
  loteid Int @map("m_loteid")
  idnota Int @map("m_idnota") @unique
  responsavelid Int @map("m_responsavelid")

  lote lotes @relation(fields: [loteid],references: [id])
  notafiscal notasfiscais @relation(fields: [idnota],references: [id])
  responsavel usuarios @relation(fields: [responsavelid],references: [id])
}

enum tipo {
  ENTRADA
  SAIDA
  OUTRO
}