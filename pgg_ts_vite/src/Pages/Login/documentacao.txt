B√°sicos:

Tudo em Typescript gira em torno de TIPOS.
√â ben√©fico pois voc√™ for√ßa dados a obedecer certos tipos de dados
Exemplo, dados de tipo string n√£o aceitam valores num√©ricos, booleanos, nem qualquer outra merda
Pq isso √© bom? Minimiza erros, lembra do erro maluco que deu com o BD local? Onde p√°ginas n√£o carregavam, algumas diziam que "includes" n√£o era uma fun√ß√£o, aquela merda toda?
Com TypeScript esses erros n√£o existiriam, pois os dados tem uma √öNICA forma de comportar, e VOC√ä decide qual √©, n√£o o javascript (como antigamente)

Exemplo:

let teste: string = "sou uma string"; 

Anatomia:
let: Classe de vari√°vel (let, const, var)
teste: Nome da vari√°vel
string: tipo da var√≠avel (a partir de agora, teste s√≥ aceita string)
= "sou uma string": valor

Como usar com react?

const [teste, setTeste] = useState<string>("")

Dessa forma üëç

-----------------------------------------------------
Importantes:

Algumas vezes, VOC√ä criar√° os tipos, sim, voc√™ literalmente cria um tipo pra linguagem obedecer, se isso n√£o for do caralho, n√£o sei o que √© 

Quais vezes seriam essas? 2 bem utilizadas s√£o: Definir objetos e passar props
EscolheForm.tsx mostra como e pq isso √© utilizado

Tipos funcionam com chave e valor, ent√£o um tipo funciona muito bem como um objeto

Agr, como crio um tipo?

Vc tem 2 op√ß√µes, com a keyword type, ou com interface.
S√£o muito semelhantes, segundo algumas pessoas, evite a interface. Mas na realidade tudo depende do que vai deixar o seu c√≥digo mais leg√≠vel.

exemplo:

type meuTipo = "ValorCustom"

meuTipo √© SOMENTE a string "ValorCustom", nenhum outro valor funciona.

ex:

let str: meuTipo = "teste" // -> Erro!!!!

let str: meuTipo = "ValorCustom" // -> Tranquilo!!!!

cobre muito mais coisas:
https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html 